// `:host` targets the custom element compiled by Stencil
:host {
  color: inherit;
  display: inline-flex;
  vertical-align: middle;
  white-space: nowrap;

  // @Prop alignment
  &([alignment="left"]) {
    .menu-outer,
    .arrow {
      left: 0;
    }
  }

  &([alignment="center"]) {
    .menu-outer {
      left: 50%;
      transform: translate(-50%);
    }

    .arrow {
      left: calc(50% ~"-" 15px);
    }
  }

  &([alignment="right"]) {
    .menu-outer,
    .arrow {
      right: 0;
    }
  }

  // @Prop direction
  &([direction="up"]) {
    .menu-outer {
      bottom: calc(100% ~"+" @space-1);
    }

    .menu {
      margin-bottom: @space-3;
      padding-bottom: @space-2;
      padding-top: @space-1;
    }

    .arrow {
      bottom: -10px;

      &::before {
        top: -5px;
        transform: rotate(180deg);
      }

      &::after {
        top: -29px;
      }
    }
  }

  &([direction]:not([direction="up"])) {
    .menu-outer {
      top: calc(100% ~"+" @space-1);
    }

    .menu {
      margin-top: @space-3;
      padding-top: @space-2;
      padding-bottom: @space-1;
    }

    .arrow {
      top: -10px;

      &::before {
        top: 1px;
      }

      &::after {
        top: -10px;
      }
    }
  }

  // @Prop onCenter
  &([trigger-centered]:not([trigger-centered="false"])[alignment="left"]) {
    .menu-outer {
      left: calc(50% ~"-" 10px);
      transform: translateX(-@space-2);
    }
  }

  &([trigger-centered]:not([trigger-centered="false"])[alignment="right"]) {
    .menu-outer {
      right: calc(50% ~"-" 10px);
      transform: translateX(@space-2);
    }
  }

  // @Prop wrap
  &([wrap]:not([wrap="false"])) {
    white-space: unset;
  }

  // Applied only when a core-dropdown is in a core-button slot
  &([slot="button-dropdown-right"]),
  &([slot="button-dropdown-left"]) {
    position: relative;

    .trigger::after {
      content: "";
      background-color: @color-gray-3;
      height: calc(100% ~"-" 2px);
      position: absolute;
      top: 1px;
      transition: background-color 0.12s ease-in-out;
      width: 1px;
    }

    .core-dropdown {
      &.active .trigger {
        box-shadow: 0 0 0 1px @color-gray-8 inset;
        color: @color-gray-8;

        &::after {
          z-index: -1;
        }
      }

      &:hover .trigger::after {
        background-color: @color-gray-5;
      }
    }
  }

  // Applied only when a core-dropdown is in a core-button slot
  &([slot="button-dropdown-right"]) {
    left: 15px;

    .core-dropdown.active .trigger {
      border-top-right-radius: @border-radius-md;
      border-bottom-right-radius: @border-radius-md;
    }

    .trigger::after {
      left: 0;
    }
  }

  // Applied only when a core-dropdown is in a core-button slot
  &([slot="button-dropdown-left"]) {
    right: 15px;

    .core-dropdown.active .trigger {
      border-top-left-radius: @border-radius-md;
      border-bottom-left-radius: @border-radius-md;
    }

    .trigger::after {
      right: 0;
    }
  }

  .core-dropdown {
    display: inline-flex;
    position: relative;
    vertical-align: middle;

    &.active,
    &.hoverable:hover {
      .menu-outer {
        display: flex;
      }
    }
  }

  .trigger,
  .actions-toggle {
    color: inherit;
    cursor: pointer;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .menu-outer {
    display: none;
    max-width: 95vw;
    position: absolute;
    width: inherit;
    z-index: 9;
  }

  .menu {
    background-color: @color-white;
    border-radius: @space-1;
    box-shadow: @shadow-3;
    box-sizing: border-box;
    flex-direction: column;
    font-weight: normal;
    margin-top: @space-3;
    padding-top: @space-2;
    padding-bottom: @space-1;
    position: relative;
    width: inherit;
  }

  .arrow {
    height: 10px;
    margin-left: 10px;
    position: absolute;

    &::before {
      content: "";
      border-style: solid;
      border-width: 0 15px 15px 15px;
      border-color: transparent transparent @color-white transparent;
      display: block;
      height: 0;
      position: relative;
      left: -5px;
      width: 0;
      z-index: 2;
    }

    &::after {
      content: "";
      box-shadow: 2px 2px @space-2 rgba(17, 22, 26, 0.2);
      display: block;
      height: 20px;
      transform: rotate(45deg);
      position: relative;
      left: 0;
      width: 20px;
      z-index: -1;
    }
  }
}

// :host-context(<selector>) matches the component if it or any of its ancestors matches <selector>
:host-context(core-button[variation="primary"]) {
  background-color: @color-blue-dark-1;
  border-top-right-radius: @border-radius-md;
  border-bottom-right-radius: @border-radius-md;
  color: @color-white;
}

:host-context(core-button) {
  .trigger {
    padding: 10px;
  }

  .menu-outer {
    top: calc(100% ~"-" @space-2) !important;
  }
}

:host-context(core-breadcrumb-group) {
  color: @color-gray-5;
  display: flex;
  margin-right: 10px;
}
